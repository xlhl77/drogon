<%inc#include "create_model.h"
using namespace drogon_ctl;
%>
/**
 *
 *  [[className]].cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "[[className]].h"
#include <drogon/utils/Utilities.h>
#include <string>
<%c++
    const auto &cols=@@.get<std::vector<ColumnInfo>>("columns");
    auto className=@@.get<std::string>("className");
    std::string indentStr(@@.get<std::string>("className").length(), ' ');
%>

using namespace drogon;
using namespace drogon_model::[[dbName]]<%c++
auto &schema=@@.get<std::string>("schema");
if(!schema.empty())
{
    $$<<"::"<<schema<<";\n";
}
else
{
    $$<<";\n";
}
%>

<%c++for(auto col:cols){
%>
const std::string [[className]]::Cols::_{%col._colName%} = "{%col._colName%}";
<%c++
}%>
<%c++if(@@.get<int>("hasPrimaryKey")<=1){%>
const std::string [[className]]::primaryKeyName = "[[primaryKeyName]]";
<%c++}else{%>
const std::vector<std::string> [[className]]::primaryKeyName = {<%c++
auto pkName=@@.get<std::vector<std::string>>("primaryKeyName");
for(size_t i=0;i<pkName.size();i++)
{
    $$<<"\""<<pkName[i]<<"\"";
    if(i<(pkName.size()-1))
        $$<<",";
}
%>};
<%c++}%>
<%c++ if(@@.get<int>("hasPrimaryKey")>0){%>
const bool [[className]]::hasPrimaryKey = true;
<%c++ }else{%>
const bool [[className]]::hasPrimaryKey = false;
<%c++}%>
const std::string [[className]]::tableName = "<%c++
if(!schema.empty())
{
    $$<<schema<<".";
}
%>[[tableName]]";

const std::vector<typename [[className]]::MetaData> [[className]]::_metaData={
<%c++for(size_t i=0;i<cols.size();i++){
    auto &col=cols[i];
$$<<"{\""<<col._colName<<"\",\""<<col._colType<<"\",\""<<col._colDatabaseType<<"\","<<col._colLength<<","<<col._isAutoVal<<","<<col._isPrimaryKey<<","<<col._notNull<<"}";
if(i<(cols.size()-1))
$$<<",\n";
else
$$<<"\n";
}%>
};
const std::string &[[className]]::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
[[className]]::[[className]](const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
<%c++
    for(size_t i = 0; i <cols.size(); i++)
    {
        auto &col = cols[i];
        if(col._colType.empty())
            continue;
%>
        if(!r["{%col._colName%}"].isNull())
        {
<%c++
            if(col._colDatabaseType=="date")
            {
                $$<<"            auto daysStr = r[\""<<col._colName<<"\"].as<std::string>();\n";
                $$<<"            struct tm stm;\n";
                $$<<"            memset(&stm,0,sizeof(stm));\n";
                $$<<"            strptime(daysStr.c_str(),\"%Y-%m-%d\",&stm);\n";
                $$<<"            long t = timelocal(&stm);\n";
 //               $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(::trantor::Date(946656000000000).after(daysNum*86400));\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(t*1000000);\n";
                $$<<"        }\n";
                continue;
            }
            else if(col._colDatabaseType.find("timestamp")!=std::string::npos||col._colDatabaseType.find("datetime")!=std::string::npos)
            {
                $$<<"            auto timeStr = r[\""<<col._colName<<"\"].as<std::string>();\n";
                $$<<"            struct tm stm;\n";
                $$<<"            memset(&stm,0,sizeof(stm));\n";
                $$<<"            auto p = strptime(timeStr.c_str(),\"%Y-%m-%d %H:%M:%S\",&stm);\n";
                $$<<"            size_t t = timelocal(&stm);\n";
                $$<<"            size_t decimalNum = 0;\n";
                $$<<"            if(*p=='.')\n";
                $$<<"            {\n";
                $$<<"                std::string decimals(p+1,&timeStr[timeStr.length()]);\n";
                $$<<"                while(decimals.length()<6)\n";
                $$<<"                {\n";
                $$<<"                    decimals += \"0\";\n";
                $$<<"                }\n";
                $$<<"                decimalNum = (size_t)atol(decimals.c_str());\n";
                $$<<"            }\n";
 //               $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(::trantor::Date(946656000000000).after(daysNum*86400));\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(t*1000000+decimalNum);\n";
                $$<<"        }\n";
                continue;
            } 
            else if(col._colDatabaseType=="bytea")
            {
                $$<<"            auto str = r[\""<<col._colName<<"\"].as<string_view>();\n";
                $$<<"            if(str.length()>=2&&\n";
                $$<<"                str[0]=='\\\\'&&str[1]=='x')\n";
                $$<<"            {\n";
                $$<<"                _"<<col._colValName<<"=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));\n";
                $$<<"            }\n";
                $$<<"        }\n";
                continue;
            }           
%>
            _{%col._colValName%}=std::make_shared<{%col._colType%}>(r["{%col._colName%}"].as<{%col._colType%}>());
        }
<%c++}
%>
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + {%cols.size()%} > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
<%c++
    for(size_t i = 0; i <cols.size(); i++)
    {
        auto &col = cols[i];
        if(col._colType.empty())
            continue;
%>
        index = offset + {%i%};
        if(!r[index].isNull())
        {
<%c++
            if(col._colDatabaseType=="date")
            {
                $$<<"            auto daysStr = r[index].as<std::string>();\n";
                $$<<"            struct tm stm;\n";
                $$<<"            memset(&stm,0,sizeof(stm));\n";
                $$<<"            strptime(daysStr.c_str(),\"%Y-%m-%d\",&stm);\n";
                $$<<"            long t = timelocal(&stm);\n";
 //               $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(::trantor::Date(946656000000000).after(daysNum*86400));\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(t*1000000);\n";
                $$<<"        }\n";
                continue;
            }
            else if(col._colDatabaseType.find("timestamp")!=std::string::npos||col._colDatabaseType.find("datetime")!=std::string::npos)
            {
                $$<<"            auto timeStr = r[index].as<std::string>();\n";
                $$<<"            struct tm stm;\n";
                $$<<"            memset(&stm,0,sizeof(stm));\n";
                $$<<"            auto p = strptime(timeStr.c_str(),\"%Y-%m-%d %H:%M:%S\",&stm);\n";
                $$<<"            size_t t = timelocal(&stm);\n";
                $$<<"            size_t decimalNum = 0;\n";
                $$<<"            if(*p=='.')\n";
                $$<<"            {\n";
                $$<<"                std::string decimals(p+1,&timeStr[timeStr.length()]);\n";
                $$<<"                while(decimals.length()<6)\n";
                $$<<"                {\n";
                $$<<"                    decimals += \"0\";\n";
                $$<<"                }\n";
                $$<<"                decimalNum = (size_t)atol(decimals.c_str());\n";
                $$<<"            }\n";
 //               $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(::trantor::Date(946656000000000).after(daysNum*86400));\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(t*1000000+decimalNum);\n";
                $$<<"        }\n";
                continue;
            } 
            else if(col._colDatabaseType=="bytea")
            {
                $$<<"            auto str = r[index].as<string_view>();\n";
                $$<<"            if(str.length()>=2&&\n";
                $$<<"                str[0]=='\\\\'&&str[1]=='x')\n";
                $$<<"            {\n";
                $$<<"                _"<<col._colValName<<"=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));\n";
                $$<<"            }\n";
                $$<<"        }\n";
                continue;
            }           
%>
            _{%col._colValName%}=std::make_shared<{%col._colType%}>(r[index].as<{%col._colType%}>());
        }
<%c++}%>
    }

}

[[className]]::[[className]](const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != {%cols.size()%})
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
<%c++
    for(size_t i=0; i<cols.size(); i++)
    {
        auto &col = cols[i];        
        if(col._colType.empty())
            continue;
%>
    if(!pMasqueradingVector[{%i%}].empty() && pJson.isMember(pMasqueradingVector[{%i%}]))
    {
        _dirtyFlag[{%i%}] = true;
<%c++
            if(col._colType == "std::string")
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<std::string>(pJson[pMasqueradingVector["<<i<<"]].asString());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colDatabaseType=="date")
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            auto daysStr = pJson[pMasqueradingVector["<<i<<"]].asString();\n";
                $$<<"            struct tm stm;\n";
                $$<<"            memset(&stm,0,sizeof(stm));\n";
                $$<<"            strptime(daysStr.c_str(),\"%Y-%m-%d\",&stm);\n";
                $$<<"            long t = timelocal(&stm);\n";
 //               $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(::trantor::Date(946656000000000).after(daysNum*86400));\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(t*1000000);\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colDatabaseType.find("timestamp")!=std::string::npos||col._colDatabaseType.find("datetime")!=std::string::npos)
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            auto timeStr = pJson[pMasqueradingVector["<<i<<"]].asString();\n";
                $$<<"            struct tm stm;\n";
                $$<<"            memset(&stm,0,sizeof(stm));\n";
                $$<<"            auto p = strptime(timeStr.c_str(),\"%Y-%m-%d %H:%M:%S\",&stm);\n";
                $$<<"            size_t t = timelocal(&stm);\n";
                $$<<"            size_t decimalNum = 0;\n";
                $$<<"            if(*p=='.')\n";
                $$<<"            {\n";
                $$<<"                std::string decimals(p+1,&timeStr[timeStr.length()]);\n";
                $$<<"                while(decimals.length()<6)\n";
                $$<<"                {\n";
                $$<<"                    decimals += \"0\";\n";
                $$<<"                }\n";
                $$<<"                decimalNum = (size_t)atol(decimals.c_str());\n";
                $$<<"            }\n";
 //               $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(::trantor::Date(946656000000000).after(daysNum*86400));\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(t*1000000+decimalNum);\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            } 
            else if(col._colDatabaseType=="bytea" || col._colDatabaseType.find("blob") != std::string::npos)
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            auto str = pJson[pMasqueradingVector["<<i<<"]].asString();\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            } 
            else if(col._colType.find("uint") == 0 || col._colType == "unsigned short")
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<"<<col._colType<<">(("<<col._colType<<")pJson[pMasqueradingVector["<<i<<"]].asUInt64());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colType.find("int") == 0 || col._colType == "short")
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<"<<col._colType<<">(("<<col._colType<<")pJson[pMasqueradingVector["<<i<<"]].asInt64());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colType == "float")
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<float>(pJson[pMasqueradingVector["<<i<<"]].asFloat());\n";
                $$<<"        }\n";
                $$<<"     }\n";
                continue;
            }
            else if(col._colType == "double")
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<double>(pJson[pMasqueradingVector["<<i<<"]].asDouble());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colType == "bool")
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<bool>(pJson[pMasqueradingVector["<<i<<"]].asBool());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }      
%>
        }
<%c++   
    }
%>
}

[[className]]::[[className]](const Json::Value &pJson) noexcept(false)
{
<%c++
    for(size_t i=0;i<cols.size();i++)
    {
        auto &col = cols[i];
        if(col._colType.empty())
            continue;
%>
    if(pJson.isMember("{%col._colName%}"))
    {
        _dirtyFlag[{%i%}]=true;
<%c++
            if(col._colType == "std::string")
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<std::string>(pJson[\""<<col._colName<<"\"].asString());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colDatabaseType=="date")
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            auto daysStr = pJson[\""<<col._colName<<"\"].asString();\n";
                $$<<"            struct tm stm;\n";
                $$<<"            memset(&stm,0,sizeof(stm));\n";
                $$<<"            strptime(daysStr.c_str(),\"%Y-%m-%d\",&stm);\n";
                $$<<"            long t = timelocal(&stm);\n";
 //               $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(::trantor::Date(946656000000000).after(daysNum*86400));\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(t*1000000);\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colDatabaseType.find("timestamp")!=std::string::npos||col._colDatabaseType.find("datetime")!=std::string::npos)
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            auto timeStr = pJson[\""<<col._colName<<"\"].asString();\n";
                $$<<"            struct tm stm;\n";
                $$<<"            memset(&stm,0,sizeof(stm));\n";
                $$<<"            auto p = strptime(timeStr.c_str(),\"%Y-%m-%d %H:%M:%S\",&stm);\n";
                $$<<"            size_t t = timelocal(&stm);\n";
                $$<<"            size_t decimalNum = 0;\n";
                $$<<"            if(*p=='.')\n";
                $$<<"            {\n";
                $$<<"                std::string decimals(p+1,&timeStr[timeStr.length()]);\n";
                $$<<"                while(decimals.length()<6)\n";
                $$<<"                {\n";
                $$<<"                    decimals += \"0\";\n";
                $$<<"                }\n";
                $$<<"                decimalNum = (size_t)atol(decimals.c_str());\n";
                $$<<"            }\n";
 //               $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(::trantor::Date(946656000000000).after(daysNum*86400));\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(t*1000000+decimalNum);\n";
                 $$<<"        }\n";               
                $$<<"    }\n";
                continue;
            } 
            else if(col._colDatabaseType=="bytea" || col._colDatabaseType.find("blob") != std::string::npos)
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            auto str = pJson[\""<<col._colName<<"\"].asString();\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));\n";
                $$<<"        }\n";                
                $$<<"    }\n";
                continue;
            } 
            else if(col._colType.find("uint") == 0 || col._colType == "unsigned short")
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<"<<col._colType<<">(("<<col._colType<<")pJson[\""<<col._colName<<"\"].asUInt64());\n";
                $$<<"        }\n";                 
                $$<<"    }\n";
                continue;
            }
            else if(col._colType.find("int") == 0 || col._colType == "short")
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<"<<col._colType<<">(("<<col._colType<<")pJson[\""<<col._colName<<"\"].asInt64());\n";
                $$<<"        }\n";                  
                $$<<"    }\n";
                continue;
            }
            else if(col._colType == "float")
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<float>(pJson[\""<<col._colName<<"\"].asFloat());\n";
                $$<<"        }\n";                 
                $$<<"     }\n";
                continue;
            }
            else if(col._colType == "double")
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<double>(pJson[\""<<col._colName<<"\"].asDouble());\n";
                $$<<"        }\n";                 
                $$<<"    }\n";
                continue;
            }
            else if(col._colType == "bool")
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<bool>(pJson[\""<<col._colName<<"\"].asBool());\n";
                $$<<"        }\n";  
                $$<<"    }\n";
                continue;
            }      
%>
    }
<%c++
    }
    %>
}

void [[className]]::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != {%cols.size()%})
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
<%c++
    for(size_t i=0;i<cols.size();i++)
    {
        auto &col = cols[i];
        if(col._colType.empty())
            continue;
%>
    if(!pMasqueradingVector[{%i%}].empty() && pJson.isMember(pMasqueradingVector[{%i%}]))
    {
<%c++
            if(!col._isAutoVal && !col._isPrimaryKey)
            {
                $$<<"        _dirtyFlag["<<i<<"] = true;\n";
            }
            if(col._colType == "std::string")
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<std::string>(pJson[pMasqueradingVector["<<i<<"]].asString());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colDatabaseType=="date")
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            auto daysStr = pJson[pMasqueradingVector["<<i<<"]].asString();\n";
                $$<<"            struct tm stm;\n";
                $$<<"            memset(&stm,0,sizeof(stm));\n";
                $$<<"            strptime(daysStr.c_str(),\"%Y-%m-%d\",&stm);\n";
                $$<<"            long t = timelocal(&stm);\n";
 //               $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(::trantor::Date(946656000000000).after(daysNum*86400));\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(t*1000000);\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colDatabaseType.find("timestamp")!=std::string::npos||col._colDatabaseType.find("datetime")!=std::string::npos)
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            auto timeStr = pJson[pMasqueradingVector["<<i<<"]].asString();\n";
                $$<<"            struct tm stm;\n";
                $$<<"            memset(&stm,0,sizeof(stm));\n";
                $$<<"            auto p = strptime(timeStr.c_str(),\"%Y-%m-%d %H:%M:%S\",&stm);\n";
                $$<<"            size_t t = timelocal(&stm);\n";
                $$<<"            size_t decimalNum = 0;\n";
                $$<<"            if(*p=='.')\n";
                $$<<"            {\n";
                $$<<"                std::string decimals(p+1,&timeStr[timeStr.length()]);\n";
                $$<<"                while(decimals.length()<6)\n";
                $$<<"                {\n";
                $$<<"                    decimals += \"0\";\n";
                $$<<"                }\n";
                $$<<"                decimalNum = (size_t)atol(decimals.c_str());\n";
                $$<<"            }\n";
 //               $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(::trantor::Date(946656000000000).after(daysNum*86400));\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(t*1000000+decimalNum);\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            } 
            else if(col._colDatabaseType=="bytea" || col._colDatabaseType.find("blob") != std::string::npos)
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            auto str = pJson[pMasqueradingVector["<<i<<"]].asString();\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            } 
            else if(col._colType.find("uint") == 0 || col._colType == "unsigned short")
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<"<<col._colType<<">(("<<col._colType<<")pJson[pMasqueradingVector["<<i<<"]].asUInt64());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colType.find("int") == 0 || col._colType == "short")
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<"<<col._colType<<">(("<<col._colType<<")pJson[pMasqueradingVector["<<i<<"]].asInt64());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colType == "float")
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<float>(pJson[pMasqueradingVector["<<i<<"]].asFloat());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colType == "double")
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<double>(pJson[pMasqueradingVector["<<i<<"]].asDouble());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colType == "bool")
            {
                $$<<"        if(!pJson[pMasqueradingVector["<<i<<"]].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<bool>(pJson[pMasqueradingVector["<<i<<"]].asBool());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }      
%>
        }
<%c++
    }
    %>
}
                                                                    
void [[className]]::updateByJson(const Json::Value &pJson) noexcept(false)
{
<%c++
    for(size_t i=0;i<cols.size();i++)
    {
        auto &col = cols[i];
        if(col._colType.empty())
            continue;
        %>
    if(pJson.isMember("{%col._colName%}"))
    {
<%c++
            if(!col._isAutoVal && !col._isPrimaryKey)
            {
                $$<<"        _dirtyFlag["<<i<<"] = true;\n";
            }
            if(col._colType == "std::string")
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<std::string>(pJson[\""<<col._colName<<"\"].asString());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colDatabaseType=="date")
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            auto daysStr = pJson[\""<<col._colName<<"\"].asString();\n";
                $$<<"            struct tm stm;\n";
                $$<<"            memset(&stm,0,sizeof(stm));\n";
                $$<<"            strptime(daysStr.c_str(),\"%Y-%m-%d\",&stm);\n";
                $$<<"            long t = timelocal(&stm);\n";
 //               $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(::trantor::Date(946656000000000).after(daysNum*86400));\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(t*1000000);\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colDatabaseType.find("timestamp")!=std::string::npos||col._colDatabaseType.find("datetime")!=std::string::npos)
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            auto timeStr = pJson[\""<<col._colName<<"\"].asString();\n";
                $$<<"            struct tm stm;\n";
                $$<<"            memset(&stm,0,sizeof(stm));\n";
                $$<<"            auto p = strptime(timeStr.c_str(),\"%Y-%m-%d %H:%M:%S\",&stm);\n";
                $$<<"            size_t t = timelocal(&stm);\n";
                $$<<"            size_t decimalNum = 0;\n";
                $$<<"            if(*p=='.')\n";
                $$<<"            {\n";
                $$<<"                std::string decimals(p+1,&timeStr[timeStr.length()]);\n";
                $$<<"                while(decimals.length()<6)\n";
                $$<<"                {\n";
                $$<<"                    decimals += \"0\";\n";
                $$<<"                }\n";
                $$<<"                decimalNum = (size_t)atol(decimals.c_str());\n";
                $$<<"            }\n";
 //               $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(::trantor::Date(946656000000000).after(daysNum*86400));\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<::trantor::Date>(t*1000000+decimalNum);\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            } 
            else if(col._colDatabaseType=="bytea" || col._colDatabaseType.find("blob") != std::string::npos)
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            auto str = pJson[\""<<col._colName<<"\"].asString();\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            } 
            else if(col._colType.find("uint") == 0 || col._colType == "unsigned short")
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<"<<col._colType<<">(("<<col._colType<<")pJson[\""<<col._colName<<"\"].asUInt64());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colType.find("int") == 0 || col._colType == "short")
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<"<<col._colType<<">(("<<col._colType<<")pJson[\""<<col._colName<<"\"].asInt64());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colType == "float")
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<float>(pJson[\""<<col._colName<<"\"].asFloat());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colType == "double")
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<double>(pJson[\""<<col._colName<<"\"].asDouble());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }
            else if(col._colType == "bool")
            {
                $$<<"        if(!pJson[\""<<col._colName<<"\"].isNull())\n";
                $$<<"        {\n";
                $$<<"            _"<<col._colValName<<"=std::make_shared<bool>(pJson[\""<<col._colName<<"\"].asBool());\n";
                $$<<"        }\n";
                $$<<"    }\n";
                continue;
            }      
%>
        }
<%c++
    }
    %>
}

<%c++
    for(size_t i=0;i<cols.size();i++)
    {
        auto &col = cols[i];
        if(!col._colType.empty())
        {
            $$<<"const "<<col._colType<<" &"<<className<<"::getValueOf"<<col._colTypeName<<"() const noexcept\n";
            $$<<"{\n";
            $$<<"    const static "<<col._colType<<" defaultValue = "<<col._colType<<"();\n";
            $$<<"    if(_"<<col._colValName<<")\n";
            $$<<"        return *_"<<col._colValName<<";\n";
            $$<<"    return defaultValue;\n";
            $$<<"}\n";
            if(col._colType=="std::vector<char>")
            {
                $$<<"std::string "<<className<<"::getValueOf"<<col._colTypeName<<"AsString() const noexcept\n";
                $$<<"{\n";
                $$<<"    const static std::string defaultValue = std::string();\n";
                $$<<"    if(_"<<col._colValName<<")\n";
                $$<<"        return std::string(_"<<col._colValName<<"->data(),_"<<col._colValName<<"->size());\n";
                $$<<"    return defaultValue;\n";
                $$<<"}\n";
            }
            $$<<"const std::shared_ptr<"<<col._colType<<"> &"<<className<<"::get"<<col._colTypeName<<"() const noexcept\n";
            $$<<"{\n";
            $$<<"    return _"<<col._colValName<<";\n";
            $$<<"}\n";
 
            if(!col._isAutoVal)
            {
                $$<<"void "<<className<<"::set"<<col._colTypeName<<"(const "<<col._colType<<" &p"<<col._colTypeName<<") noexcept\n";
                $$<<"{\n";
                if(col._colDatabaseType=="date")
                {
                    $$<<"    _"<<col._colValName<<" = std::make_shared<"<<col._colType<<">(p"<<col._colTypeName<<".roundDay());\n";
                }
                else
                {
                    $$<<"    _"<<col._colValName<<" = std::make_shared<"<<col._colType<<">(p"<<col._colTypeName<<");\n";
                }
                $$<<"    _dirtyFlag["<<i<<"] = true;\n";
                $$<<"}\n";
                
                if(col._colType=="std::string")
                {
                    $$<<"void "<<className<<"::set"<<col._colTypeName<<"("<<col._colType<<" &&p"<<col._colTypeName<<") noexcept\n";
                    $$<<"{\n";
                    $$<<"    _"<<col._colValName<<" = std::make_shared<"<<col._colType<<">(std::move(p"<<col._colTypeName<<"));\n";
                    $$<<"    _dirtyFlag["<<i<<"] = true;\n";
                    $$<<"}\n";
                }

                if(col._colType=="std::vector<char>")
                {
                    $$<<"void "<<className<<"::set"<<col._colTypeName<<"(const std::string &p"<<col._colTypeName<<") noexcept\n";
                    $$<<"{\n";
                    $$<<"    _"<<col._colValName<<" = std::make_shared<std::vector<char>>(p"<<col._colTypeName<<".c_str(),p"<<col._colTypeName<<".c_str()+p"<<col._colTypeName<<".length());\n";
                    $$<<"    _dirtyFlag["<<i<<"] = true;\n";
                    $$<<"}\n";
                }

                if(!col._notNull)
                {
                    $$<<"void "<<className<<"::set"<<col._colTypeName<<"ToNull() noexcept\n";
                    $$<<"{\n";
                    $$<<"    _"<<col._colValName<<".reset();\n";
                    $$<<"    _dirtyFlag["<<i<<"] = true;\n";
                    $$<<"}\n";
                }
            }
            if(col._isPrimaryKey&&@@.get<int>("hasPrimaryKey")==1)
            {
                $$<<"const typename "<<className<<"::PrimaryKeyType & "<<className<<"::getPrimaryKey() const\n";
                $$<<"{\n";
                $$<<"    assert(_"<<col._colValName<<");\n";
                $$<<"    return *_"<<col._colValName<<";\n";
                $$<<"}\n";
            }
        }
        $$<<"\n";    
    }
    if(@@.get<std::string>("rdbms")=="postgresql"||@@.get<int>("hasPrimaryKey")!=1)
    {
        $$<<"void "<<className<<"::updateId(const uint64_t id)\n";
        $$<<"{\n";
        $$<<"}\n";
    }
    else if(@@.get<std::string>("rdbms")=="mysql"||@@.get<std::string>("rdbms")=="sqlite3")
    {
        auto primaryKeyTypeString=@@.get<std::string>("primaryKeyType");
        $$<<"void "<<className<<"::updateId(const uint64_t id)\n";
        $$<<"{\n";
        for(auto col:cols)
        {
            if(col._isAutoVal)
            {
                if(primaryKeyTypeString!="uint64_t")
                {
                    $$<<"    _"<<col._colValName<<" = std::make_shared<"<<primaryKeyTypeString<<">(static_cast<"<<primaryKeyTypeString<<">(id));\n";
                }
                else
                {
                    $$<<"    _"<<col._colValName<<" = std::make_shared<uint64_t>(id);\n";
                }
                break;
            }
        }
        $$<<"}\n";
    }
    if(@@.get<int>("hasPrimaryKey")>1)
    {
        $$<<"typename "<<className<<"::PrimaryKeyType "<<className<<"::getPrimaryKey() const\n";
        $$<<"{\n";
        $$<<"    return std::make_tuple(";
        int count=0;
        for(auto col:cols)
        {
            if(col._isPrimaryKey)
            {
                count++;
                $$<<"*_"<<col._colValName;
                if(count<@@.get<int>("hasPrimaryKey"))
                    $$<<",";
            }
        }
        $$<<");\n";
        $$<<"}\n";
    }
%>

const std::vector<std::string> &[[className]]::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
<%c++for(size_t i=0;i<cols.size();i++){
    auto col=cols[i];
    if(!col._isAutoVal&&!col._colType.empty())
    {
        $$<<"        \""<<col._colName<<"\"";
        if(i<(cols.size()-1))
            $$<<",\n";
        else
            $$<<"\n";
    }
}%>
    };
    return _inCols;
}

void [[className]]::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
<%c++for(size_t i = 0; i < cols.size(); i++){
    auto &col = cols[i];
    if(!col._isAutoVal&&!col._colType.empty())
    {
%>
    if(_dirtyFlag[{%i%}])
    {
        if(get{%col._colTypeName%}())
        {
            binder << getValueOf{%col._colTypeName%}();
        }
        else
        {
            binder << nullptr;
        }
    }
<%c++
    }
}
%>
}

const std::vector<std::string> [[className]]::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void [[className]]::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
<%c++
    for(size_t i=0;i<cols.size();i++)
    {
        auto & col=cols[i];
        if(col._colType.empty()||col._isAutoVal)
            continue;
%>
    if(_dirtyFlag[{%i%}])
    {
        if(get{%col._colTypeName%}())
        {
            binder << getValueOf{%col._colTypeName%}();
        }
        else
        {
            binder << nullptr;
        }
    }
<%c++
    }
%>
}
Json::Value [[className]]::toJson() const
{
    Json::Value ret;
<%c++for(auto col:cols){%>
    if(get{%col._colTypeName%}())
    {
<%c++if(col._colDatabaseType=="date"){%>
        ret["{%col._colName%}"]=get{%col._colTypeName%}()->toDbStringLocal();
<%c++}else if(col._colDatabaseType.find("timestamp")!=std::string::npos||col._colDatabaseType.find("datetime")!=std::string::npos){%>
        ret["{%col._colName%}"]=get{%col._colTypeName%}()->toDbStringLocal();
<%c++}else if(col._colDatabaseType=="bytea"||col._colDatabaseType.find("blob")!=std::string::npos){%>
        ret["{%col._colName%}"]=drogon::utils::base64Encode((const unsigned char *)get{%col._colTypeName%}()->data(),get{%col._colTypeName%}()->size());
<%c++}else if(col._colType=="int64_t"){%>
        ret["{%col._colName%}"]=(Json::Int64)getValueOf{%col._colTypeName%}();
<%c++}else if(col._colType=="uint64_t"){%>
        ret["{%col._colName%}"]=(Json::UInt64)getValueOf{%col._colTypeName%}();
<%c++}else{%>
        ret["{%col._colName%}"]=getValueOf{%col._colTypeName%}();
<%c++}%>
    }
    else
    {
        ret["{%col._colName%}"]=Json::Value();
    }
<%c++
}%>
    return ret;
}

Json::Value [[className]]::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == {%cols.size()%})
    {
<%c++for(size_t i = 0; i < cols.size(); i++){
    auto &col = cols[i];
    %>
        if(!pMasqueradingVector[{%i%}].empty())
        {
            if(get{%col._colTypeName%}())
            {
<%c++if(col._colDatabaseType=="date"){%>
                ret[pMasqueradingVector[{%i%}]]=get{%col._colTypeName%}()->toDbStringLocal();
<%c++}else if(col._colDatabaseType.find("timestamp")!=std::string::npos||col._colDatabaseType.find("datetime")!=std::string::npos){%>
                ret[pMasqueradingVector[{%i%}]]=get{%col._colTypeName%}()->toDbStringLocal();
<%c++}else if(col._colDatabaseType=="bytea"||col._colDatabaseType.find("blob")!=std::string::npos){%>
                ret[pMasqueradingVector[{%i%}]]=drogon::utils::base64Encode((const unsigned char *)get{%col._colTypeName%}()->data(),get{%col._colTypeName%}()->size());
<%c++}else if(col._colType=="int64_t"){%>
                ret[pMasqueradingVector[{%i%}]]=(Json::Int64)getValueOf{%col._colTypeName%}();
<%c++}else if(col._colType=="uint64_t"){%>
                ret[pMasqueradingVector[{%i%}]]=(Json::UInt64)getValueOf{%col._colTypeName%}();
<%c++}else{%>
                ret[pMasqueradingVector[{%i%}]]=getValueOf{%col._colTypeName%}();
<%c++}%>
            }
            else
            {
                ret[pMasqueradingVector[{%i%}]]=Json::Value();
            }
        }
<%c++
}%>
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
<%c++for(auto col:cols){%>
    if(get{%col._colTypeName%}())
    {
<%c++if(col._colDatabaseType=="date"){%>
        ret["{%col._colName%}"]=get{%col._colTypeName%}()->toDbStringLocal();
<%c++}else if(col._colDatabaseType.find("timestamp")!=std::string::npos||col._colDatabaseType.find("datetime")!=std::string::npos){%>
        ret["{%col._colName%}"]=get{%col._colTypeName%}()->toDbStringLocal();
<%c++}else if(col._colDatabaseType=="bytea"||col._colDatabaseType.find("blob")!=std::string::npos){%>
        ret["{%col._colName%}"]=drogon::utils::base64Encode((const unsigned char *)get{%col._colTypeName%}()->data(),get{%col._colTypeName%}()->size());
<%c++}else if(col._colType=="int64_t"){%>
        ret["{%col._colName%}"]=(Json::Int64)getValueOf{%col._colTypeName%}();
<%c++}else if(col._colType=="uint64_t"){%>
        ret["{%col._colName%}"]=(Json::UInt64)getValueOf{%col._colTypeName%}();
<%c++}else{%>
        ret["{%col._colName%}"]=getValueOf{%col._colTypeName%}();
<%c++}%>
    }
    else
    {
        ret["{%col._colName%}"]=Json::Value();
    }
<%c++
}%>
    return ret;
}

bool [[className]]::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
<%c++
    for(size_t i=0;i<cols.size();i++)
    {
        auto &col = cols[i];
        if(col._colType.empty())
            continue;
%>
    if(pJson.isMember("{%col._colName%}"))
    {
        if(!validJsonOfField({%i%}, "{%col._colName%}", pJson["{%col._colName%}"], err, true))
            return false;
    }
<%c++if(col._notNull && !col._isAutoVal && !col._hasDefaultVal){%>
    else
    {
        err="The {%col._colName%} column cannot be null";
        return false;
    }
<%c++}
}%>
    return true;
}
bool [[className]]::validateMasqueradedJsonForCreation(const Json::Value &pJson,
     {%indentStr%}                                     const std::vector<std::string> &pMasqueradingVector,
     {%indentStr%}                                     std::string &err)
{
    if(pMasqueradingVector.size() != {%cols.size()%})
    {
        err = "Bad masquerading vector";
        return false;
    }
<%c++
    for(size_t i=0;i<cols.size();i++)
    {
        auto &col = cols[i];
        if(col._colType.empty())
            continue;
%>
    if(!pMasqueradingVector[{%i%}].empty())
    {
        if(pJson.isMember(pMasqueradingVector[{%i%}]))
        {
            if(!validJsonOfField({%i%}, pMasqueradingVector[{%i%}], pJson[pMasqueradingVector[{%i%}]], err, true))
                return false;
        }
<%c++if(col._notNull && !col._isAutoVal && !col._hasDefaultVal){%>
        else
        {
            err="The " + pMasqueradingVector[{%i%}] + " column cannot be null";
            return false;
        }
<%c++}%>
    }
<%c++}%>
    return true;
}
bool [[className]]::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
<%c++
    for(size_t i=0;i<cols.size();i++)
    {
        auto &col = cols[i];
        if(col._colType.empty())
            continue;
%>
    if(pJson.isMember("{%col._colName%}"))
    {
        if(!validJsonOfField({%i%}, "{%col._colName%}", pJson["{%col._colName%}"], err, false))
            return false;
    }
<%c++
    if(col._isPrimaryKey)
    {
%>
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
<%c++        
    }
}%>
    return true;
}
bool [[className]]::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
     {%indentStr%}                                   const std::vector<std::string> &pMasqueradingVector,
     {%indentStr%}                                   std::string &err)
{
    if(pMasqueradingVector.size() != {%cols.size()%})
    {
        err = "Bad masquerading vector";
        return false;
    }
<%c++
    for(size_t i=0;i<cols.size();i++)
    {
        auto &col = cols[i];
        if(col._colType.empty())
            continue;
%>
    if(!pMasqueradingVector[{%i%}].empty() && pJson.isMember(pMasqueradingVector[{%i%}]))
    {
        if(!validJsonOfField({%i%}, pMasqueradingVector[{%i%}], pJson[pMasqueradingVector[{%i%}]], err, false))
            return false;
    }
<%c++    
    if(col._isPrimaryKey)
    {
%>
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
<%c++        
    }
}%>
    return true;
}
bool [[className]]::validJsonOfField(size_t index,
     {%indentStr%}                   const std::string &fieldName,
     {%indentStr%}                   const Json::Value &pJson, 
     {%indentStr%}                   std::string &err, 
     {%indentStr%}                   bool isForCreation)
{
    switch(index)
    {
<%c++
    for(size_t i=0;i<cols.size();i++)
    {
        auto &col = cols[i];
        if(col._colType.empty())
            continue;
%>
        case {%i%}:
<%c++if(col._notNull){%>
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
<%c++}
            if(col._isAutoVal)
            {  
                if(col._isPrimaryKey)
                {
%>
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
<%c++                    
                }else
                {
%>
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            else
            {
                err="The automatic primary key cannot be update";
                return false;
            }
<%c++                    
                }
            } 
if(!col._notNull){%>
            if(pJson.isNull())
            {
                return true;
            }
<%c++}            
            if(col._colType == "uint64_t")
            {
%>
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
<%c++
            }
            else if(col._colType == "int64_t")
            {
%>
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
<%c++
            }
            else if(col._colType.find("uint") == 0)
            {
%>
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
<%c++
            }
            else if(col._colType.find("int") == 0)
            {
%>
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
<%c++
            }
            else if(col._colType == "float" || col._colType == "double")
            {
%>
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
<%c++
            }
            else if(col._colType == "bool")
            {
%>
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
<%c++               
            }
            else
            {
%>
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
<%c++
                if(col._colType == "std::string" && col._colLength>0)
                {
%>
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > {%col._colLength%})
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is {%col._colLength%})";
                return false;               
            }

<%c++
                }
            }
%>
            break;
<%c++
}%>     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
